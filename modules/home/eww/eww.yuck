(defwidget bar []
  (centerbox :orientation "h"
    (workspaces)
    (box)
    (indicators)))
(defwidget submap_indicator []
    (box :class {submap != "" ? "submap": ""} {submap != "" ? "󰘵 ${submap} mode" : ""})
)
(defwidget indicators []
  (box :class "indicators" :orientation "h" :space-evenly false :spacing 16 :halign "end"
    (submap_indicator)
    (music)
    (box :class "wifi" :orientation "h"
      (_network
        :ssid net_ssid :strength net_strength
        :offline "󰤮"
        :excellent "󰤨" :good "󰤥" :okay "󰤢" :slow "󰤟"
      )
    )
    (box :class "volume" :orientation "h" (
        metric
        :label {(volume > 80 ? "󰕾" : (volume > 40 ? "󰖀" : (volume > 0 ? "󰕿" : "󰝟")))}
        :value volume
        :onchange "pamixer --set-volume {}"
      )
    )
    (box :class "memory" :orientation "h" (metric :label "󰍛"
        :value {EWW_RAM.used_mem_perc}
      :onchange ""))
    (box :class "disk_usage" :orientation "h" (metric :label "󰋊"
        :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
      :onchange ""))
    (box :class "battery" :class {EWW_BATTERY["BATT"].status == "Charging" ? "battery_charging" : (EWW_BATTERY["BATT"].capacity > 40 ? "battery_normal" : "battery_low")}
      :orientation "h"
      (metric
        :label {
        EWW_BATTERY["BATT"].status == "Discharging" ?
        (
          EWW_BATTERY["BATT"].capacity > 40 ?
          "󰁹" : "󰂃"
        ): "󰂄"
        }
        :value {EWW_BATTERY["BATT"].capacity}
      :onchange "")
    )
    (box :class "time" :orientation "h" time)
  ))

(defpoll net_strength :interval "1s"
  :initial `N/A`
  `LANG=en nmcli -t -f SIGNAL,ACTIVE device wifi \
  | awk -F':' '{if($2=="yes")print$1}'`)
(defpoll net_ssid :interval "1s"
  :initial `N/A`
  `LANG=en nmcli -t -f SSID,ACTIVE device wifi \
  | awk -F':' '{if($2=="yes")print$1}'`)
(defwidget _network [strength ssid offline excellent good okay slow]
  (button :onclick "networkmanager_dmenu"
    {("${strength == "" ? offline :
      strength < 26 ? slow :
      strength < 51 ? okay :
    strength < 76 ? good : excellent} ${ssid == "" ? "Offline" : ssid}")}
  )
)

(defwidget workspacebutton [number label]
  (button :class {currentworkspace == number ? "current" : ""} :onclick {("hyprctl dispatch workspace ${number}")} label)
)
(defwidget workspaces []
  (box :class "workspaces"
    :orientation "h"
    :halign "start"
    (workspacebutton :number 1 :label 1)
    (workspacebutton :number 2 :label 2)
    (workspacebutton :number 3 :label 3)
    (workspacebutton :number 4 :label 4)
    (workspacebutton :number 5 :label 5)
    (workspacebutton :number 6 :label 6)
    (workspacebutton :number 7 :label 7)
    (workspacebutton :number 8 :label 8)
    (workspacebutton :number 9 :label 9)
    (workspacebutton :number 10 :label 10)
  )
)

(defwidget music []
  (tooltip
    (image :path '${musicArtUrl}' :image-width 300)
    (box :class "music"
        :orientation "h"
        :space-evenly false
        :halign "center"
      {music != "" ? " ${music}" : ""}
    )
  )
)


(defwidget metric [label value onchange]
  (box :orientation "h"
    :class "metric"
    :space-evenly false
    (box :class "label" label)
    (scale :min 0
      :max 101
      :active {onchange != ""}
      :value value
    :onchange onchange)))



(deflisten music :initial ""
"playerctl --follow metadata --format '{{ artist }} - {{ album }} - {{ title }}' || true")

(deflisten musicArtUrl :initial "" "getArtUrl")

(defpoll volume :interval "400ms" "pamixer --get-volume")
(defvar currentworkspace "1")
(defvar submap "")
(defpoll time :interval "1s"
"date '+%H:%M %b %d, %Y'")

(defwindow bar
  :monitor 0
  :geometry (geometry :x "0%"
    :y "0%"
    :width "97%"
    :height "20px"
  :anchor "top center")
  :reserve (struts :side "top" :distance "20px")
  :exclusive true
  :namespace "bar"
  :stacking "fg"
  (bar))
(include "./shutdown.yuck")
